<sardine:VesselUserControl
             x:Class="Sardine.Devices.Hamamatsu.Camera.Views.WPF.CameraOptionsUI"
             x:TypeArguments="hamamatsu:HamamatsuCamera"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:hamamatsu="clr-namespace:Sardine.Devices.Hamamatsu.Camera;assembly=Sardine.Devices.Hamamatsu.Camera"
             xmlns:hamamatsuAPI="clr-namespace:Sardine.Devices.Hamamatsu.Camera.API;assembly=Sardine.Devices.Hamamatsu.Camera.API"
             xmlns:sardine="clr-namespace:Sardine.Core.Views.WPF;assembly=Sardine.Core.Views.WPF"
             xmlns:local="clr-namespace:Sardine.Devices.Hamamatsu.Camera.Views.WPF"
             UpdateOnlyWithEvents ="True"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance IsDesignTimeCreatable=False, Type=hamamatsu:HamamatsuCamera}"
             d:DesignHeight="450" d:DesignWidth="800" Background="Gray">
    <UserControl.Resources>
        <local:PixelSizeToCameraSizeConverter x:Key="PixelSizeToCameraSize"/>
        <local:PixelSizeToThicknessConverter x:Key="PixelSizeToThickness"/>
    </UserControl.Resources>
    <Grid>
        <DockPanel Margin="5,0,0,0">
            <!--<Label Content="{Binding Path=Name}" d:Content="Name" Foreground="White" FontSize="20" Margin="-5,0,0,0" DockPanel.Dock="Top"/>-->
            <DockPanel DockPanel.Dock="Top" x:Name="DockPanel_CaptureWindow">
                <Rectangle Fill="Transparent">
                    <Rectangle.Style>
                        <Style TargetType="Rectangle">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=CaptureRegionValidated, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Stroke" Value="Green"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=CaptureRegionValidated, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Stroke" Value="Red"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
                <DockPanel >
                    <StackPanel>
                        <WrapPanel>
                            <StackPanel>
                                <Label Content="Width"/>
                                <TextBox Text="{Binding Path=HSize, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
                            </StackPanel>
                            <StackPanel>
                                <Label Content="Height"/>
                                <TextBox Text="{Binding Path=VSize, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
                            </StackPanel>
                        </WrapPanel>
                        <WrapPanel>
                            <StackPanel>
                                <Label Content="Horizontal Offset"/>
                                <TextBox Text="{Binding Path=HOffset, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
                            </StackPanel>
                            <StackPanel>
                                <Label Content="Vertical Offset"/>
                                <TextBox Text="{Binding Path=VOffset, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"/>
                            </StackPanel>
                        </WrapPanel>
                        <WrapPanel>
                            <Label Content="Binning"/>
                            <ComboBox x:Name="ComboBox_Binning" SelectedItem="{Binding Path=Binning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectionChanged="ComboBox_Binning_SelectionChanged"/>
                        </WrapPanel>
                        <Button x:Name="Button_UpdateRegion" Content="Update Region" Click="Button_UpdateRegion_Click">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Status, UpdateSourceTrigger=PropertyChanged}">
                                            <DataTrigger.Value>
                                                <hamamatsuAPI:CaptureStatus>Busy</hamamatsuAPI:CaptureStatus>
                                            </DataTrigger.Value>
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <Canvas  Width="210" Height="210">
                        <Rectangle Fill="Black" Width="210" Height="210"/>
                        <Rectangle Fill="White" Width="200" Height="200" Margin="5,5,5,5"/>
                        <Rectangle Fill="Orange" x:Name="Rectangle_CaptureRegion"
                                   Width="{Binding Path=HSize, Converter={StaticResource PixelSizeToCameraSize}, UpdateSourceTrigger=PropertyChanged}"
                                   Height="{Binding Path=VSize, Converter={StaticResource PixelSizeToCameraSize}, UpdateSourceTrigger=PropertyChanged}">
                            <Rectangle.Margin>
                                <MultiBinding Converter="{StaticResource PixelSizeToThickness}">
                                    <Binding Path="HOffset" UpdateSourceTrigger="PropertyChanged"/>
                                    <Binding Path="VOffset" UpdateSourceTrigger="PropertyChanged"/>
                                </MultiBinding>
                            </Rectangle.Margin>
                        </Rectangle>

                    </Canvas>
                    

                </DockPanel>
            </DockPanel>
            <DockPanel DockPanel.Dock="Top" x:Name="DockPanel_TimingWindow">
                <Rectangle Fill="Transparent">
                    <Rectangle.Style>
                        <Style TargetType="Rectangle">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=TimingValidated, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Stroke" Value="Green"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=TimingValidated, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Stroke" Value="Red"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
                <DockPanel>
                    <WrapPanel>
                        <StackPanel>
                            <Label Content="Exposure"/>
                            <TextBox Text="{Binding Path=Exposure, UpdateSourceTrigger=PropertyChanged}" />
                        </StackPanel>
                        <StackPanel>
                            <Label Content="Framerate"/>
                            <TextBox Text="{Binding Path=Framerate, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                    </WrapPanel>
                    <Button x:Name="Button_UpdateTiming" Content="Update Timing" Click="Button_UpdateTiming_Click"/>
                </DockPanel>
            </DockPanel>
            <DockPanel DockPanel.Dock="Top" x:Name="DockPanel_OutputTriggers">
                <ComboBox x:Name="ComboBox_OutputTrigger" SelectionChanged="ComboBox_OutputTrigger_SelectionChanged">
                    <ComboBox.ItemTemplate >
                        <DataTemplate>
                            <TextBlock Text="{Binding ID, StringFormat= Channel {0}}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <DockPanel x:Name="DockPanel_OutputTriggerBuilder" DockPanel.Dock="Top" d:DataContext="{d:DesignInstance IsDesignTimeCreatable=False, Type=hamamatsuAPI:CaptureTriggerBuilder}">
                    <ComboBox x:Name="ComboBox_TriggerKind" SelectedItem="{Binding Path=Kind, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <ComboBox x:Name="ComboBox_ActiveRegion" SelectedItem="{Binding Path=ActiveRegion, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <ComboBox x:Name="ComboBox_Source" SelectedItem="{Binding Path=Source, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <ComboBox x:Name="ComboBox_Polarity" SelectedItem="{Binding Path=Polarity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Text="{Binding Path=Delay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Text="{Binding Path=Period, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </DockPanel>
                <Button x:Name="Button_UpdateOutputTrigger" Content="Update Output Trigger" Click="Button_UpdateOutputTrigger_Click">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Status, UpdateSourceTrigger=PropertyChanged}">
                                    <DataTrigger.Value>
                                        <hamamatsuAPI:CaptureStatus>Busy</hamamatsuAPI:CaptureStatus>
                                    </DataTrigger.Value>
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </DockPanel>
            <DockPanel DockPanel.Dock="Top" x:Name="DockPanel_CaptureTrigger" d:DataContext="{d:DesignInstance IsDesignTimeCreatable=False, Type=hamamatsuAPI:CaptureTriggerBuilder}" >
                <ComboBox x:Name="ComboBox_TriggerSource" SelectedItem="{Binding Path=TriggerSource, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ComboBox x:Name="ComboBox_TriggerActive" SelectedItem="{Binding Path=TriggerActive, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ComboBox x:Name="ComboBox_TriggerGlobalExposure" SelectedItem="{Binding Path=TriggerGlobalExposure, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ComboBox x:Name="ComboBox_TriggerMode" SelectedItem="{Binding Path=TriggerMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ComboBox x:Name="ComboBox_TriggerPolarity" SelectedItem="{Binding Path=TriggerPolarity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <TextBox Text="{Binding Path=TriggerDelay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <TextBox Text="{Binding Path=TriggerTimes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button x:Name="Button_UpdateCaptureTrigger" Content="Update Capture Trigger" Click="Button_UpdateCaptureTrigger_Click">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Status, UpdateSourceTrigger=PropertyChanged}">
                                    <DataTrigger.Value>
                                        <hamamatsuAPI:CaptureStatus>Busy</hamamatsuAPI:CaptureStatus>
                                    </DataTrigger.Value>
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </DockPanel>
            <DockPanel DockPanel.Dock="Top" x:Name="DockPanel_CaptureControls">
                <ComboBox x:Name="ComboBox_CaptureSetting" SelectedItem="{Binding Path=CaptureSetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ComboBox x:Name="ComboBox_CaptureSpeed" SelectedItem="{Binding Path=ReadoutSpeed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <Button x:Name="Button_ValidatePrepare" d:Content="Lock and Validate" Click="Button_ValidatePrepare_Click">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Content" Value="Lock and Validate"/>
                            <Setter Property="IsEnabled" Value="True"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Status}" Value="Ready">
                                    <Setter Property="Content" Value="Release Resources"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Status}" Value="Busy">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Status}" Value="Offline">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="Button_StartStop"  Click="Button_StartStop_Click">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Content" Value="Start"/>
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Status}" Value="Busy">
                                    <Setter Property="Content" Value="Stop"/>
                                    <Setter Property="IsEnabled" Value="True"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Status}" Value="Ready">
                                    <Setter Property="IsEnabled" Value="True"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="Button_Fire" Content="Fire" Click="Button_Fire_Click">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=Status}" Value="Busy"/>
                                        <Condition Binding="{Binding ElementName=ComboBox_TriggerSource, Path=SelectedItem}" Value="Software"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>

            </DockPanel>

        </DockPanel>
    </Grid>
</sardine:VesselUserControl>
