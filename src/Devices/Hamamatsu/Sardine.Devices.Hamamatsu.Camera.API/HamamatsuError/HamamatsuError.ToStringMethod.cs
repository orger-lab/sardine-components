namespace Sardine.Devices.Hamamatsu.Camera.API
{
    public partial struct HamamatsuError
    {
        public override string ToString()
        {
            return _value switch
            {
                ERR.BUSY => "BUSY: API cannot process in busy state.",
                ERR.NOTREADY => "NOTREADY: API requires ready state.",
                ERR.NOTSTABLE => "NOTSTABLE: API requires stable state.",
                ERR.UNSTABLE => "UNSTABLE: API does not support in unstable state.",
                ERR.NOTBUSY => "NOTBUSY: API requires busy state.",
                ERR.EXCLUDED => "EXCLUDED: some resource is exclusive and already used.",
                ERR.COOLINGTROUBLE => "COOLINGTROUBLE: something happened near cooler.",
                ERR.NOTRIGGER => "NOTRIGGER: no trigger when necessary.",
                ERR.TEMPERATURE_TROUBLE => "TEMPERATURE_TROUBLE: camera warning due to dangerous temperature.",
                ERR.TOOFREQUENTTRIGGER => "TOOFREQUENTTRIGGER: an input is being triggered too many times.",
                ERR.ABORT => "ABORT: process aborted.",
                ERR.TIMEOUT => "TIMEOUT: camera timed out.",
                ERR.LOSTFRAME => "LOSTFRAME: a frame was lost.",
                ERR.MISSINGFRAME_TROUBLE => "MISSINGFRAME_TROUBLE: frame was lost due to a low level driver error.",
                ERR.INVALIDIMAGE => "INVALIDIMAGE: hpk formatted data is invalid.",
                ERR.NORESOURCE => "NORESOURCE: not enough resources available (not memory-related).",
                ERR.NOMEMORY => "NOMEMORY: not enough memory available.",
                ERR.NOMODULE => "NOMODULE: submodule not available.",
                ERR.NODRIVER => "NODRIVER: driver not available.",
                ERR.NOCAMERA => "NOCAMERA: no camera available.",
                ERR.NOGRABBER => "NOGRABBER: no framegrabber available.",
                ERR.NOCOMBINATION => "NOCOMBINATION: that registry combination does not exist.",
                ERR.FAILOPEN => "FAILOPEN: DEPRECATED.",
                ERR.INVALIDMODULE => "INVALIDMODULE: dcam_init() found invalid module.",
                ERR.INVALIDCOMMPORT => "INVALIDCOMMPORT: serial port is invalid.",
                ERR.FAILOPENBUS => "FAILOPENBUS: the bus or driver is not available.",
                ERR.FAILOPENCAMERA => "FAILOPENCAMERA: camera reported an error during opening.",
                ERR.FRAMEGRABBER_NEEDS_FIRMWAREUPDATE => "FRAMEGRABBER_NEEDS_FIRMWAREUPDATE: update framegrabber firmware to use the camera.",
                ERR.INVALIDCAMERA => "INVALIDCAMERA: invalid camera.",
                ERR.INVALIDHANDLE => "INVALIDHANDLE: invalid camera handle.",
                ERR.INVALIDPARAM => "INVALIDPARAM: invalid parameter.",
                ERR.INVALIDVALUE => "INVALIDVALUE: invalid property value.",
                ERR.OUTOFRANGE => "OUTOFRANGE: value is out of range.",
                ERR.NOTWRITABLE => "NOTWRITABLE: property is not writeable.",
                ERR.NOTREADABLE => "NOTREADABLE: property is not writeable.",
                ERR.INVALIDPROPERTYID => "INVALIDPROPERTYID: property ID is invalid.",
                ERR.NEWAPIREQUIRED => "NEWAPIREQUIRED: old API cannot present the value. Please use a newer version of the API.",
                ERR.WRONGHANDSHAKE => "WRONGHANDSHAKE: an error was retrieved from the camera unexpectedly.",
                ERR.NOPROPERTY => "NOPROPERTY: property ID does not exist.",
                ERR.INVALIDCHANNEL => "INVALIDCHANNEL: the property ID specifies channel but channel is invalid.",
                ERR.INVALIDVIEW => "INVALIDVIEW: the property ID specifies channel but channel is invalid.",
                ERR.INVALIDSUBARRAY => "INVALIDSUBARRAY: the combination of subarray values is invalid. e.g. DCAM_IDPROP_SUBARRAYHPOS + DCAM_IDPROP_SUBARRAYHSIZE is greater than the number of horizontal pixel of sensor.",
                ERR.ACCESSDENY => "ACCESSDENY: access to the property is denied due to the current camera status.",
                ERR.NOVALUETEXT => "NOVALUETEXT: the property doesn't have value text.",
                ERR.WRONGPROPERTYVALUE => "WRONGPROPERTYVALUE: at least one property value is wrong.",
                ERR.DISHARMONY => "DISHARMONY: the paired camera does not have the same parameter.",
                ERR.FRAMEBUNDLESHOULDBEOFF => "FRAMEBUNDLESHOULDBEOFF: framebundle mode should be OFF under current property settings.",
                ERR.INVALIDFRAMEINDEX => "INVALIDFRAMEINDEX: the frame index is invalid.",
                ERR.INVALIDSESSIONINDEX => "INVALIDSESSIONINDEX: the session index is invalid.",
                ERR.NOCORRECTIONDATA => "NOCORRECTIONDATA.",
                ERR.CHANNELDEPENDENTVALUE => "CHANNELDEPENDENTVALUE: each channel has own property value so can't return overall property value.",
                ERR.VIEWDEPENDENTVALUE => "VIEWDEPENDENTVALUE: each view has own property value so can't return overall property value.",
                ERR.INVALIDCALIBSETTING => "INVALIDCALIBSETTING: properties are invalid for calibration sampling. Some camera have limitations while gathering calibration data (e.g. the trigger source is INTERNAL only and read out direction isn't trigger).",
                ERR.LESSSYSTEMMEMORY => "LESSSYSTEMMEMORY: the system memory size is too small. PC doesn't have enough memory or it is limited by 32bit OS.",
                ERR.NOTSUPPORT => "NOTSUPPORT: camera does not support the function or property with current settings.",
                ERR.FAILREADCAMERA => "FAILREADCAMERA: failed to read data from the camera.",
                ERR.FAILWRITECAMERA => "FAILWRITECAMERA: failed to write data to the camera.",
                ERR.CONFLICTCOMMPORT => "CONFLICTCOMMPORT: COM port name generated a conflict.",
                ERR.OPTICS_UNPLUGGED => "OPTICS_UNPLUGGED: optics part is unplugged.",
                ERR.FAILCALIBRATION => "FAILCALIBRATION: calibration has failed.",
                ERR.INVALIDMEMBER_3 => "INVALIDMEMBER_3.",
                ERR.INVALIDMEMBER_5 => "INVALIDMEMBER_5.",
                ERR.INVALIDMEMBER_7 => "INVALIDMEMBER_7.",
                ERR.INVALIDMEMBER_8 => "INVALIDMEMBER_8.",
                ERR.INVALIDMEMBER_9 => "INVALIDMEMBER_9.",
                ERR.FAILEDOPENRECFILE => "FAILEDOPENRECFILE: DCAMREC failed to open the file.",
                ERR.INVALIDRECHANDLE => "INVALIDRECHANDLE: DCAMREC handle is invalid.",
                ERR.FAILEDWRITEDATA => "FAILEDWRITEDATA: DCAMREC failed to write the data.",
                ERR.FAILEDREADDATA => "FAILEDREADDATA: DCAMREC failed to read the data.",
                ERR.NOWRECORDING => "NOWRECORDING: DCAMREC is recording data now.",
                ERR.WRITEFULL => "WRITEFULL: DCAMREC writes full frame of the session.",
                ERR.ALREADYOCCUPIED => "ALREADYOCCUPIED: DCAMREC handle is already occupied by other HDCAM camera.",
                ERR.TOOLARGEUSERDATASIZE => "TOOLARGEUSERDATASIZE: DCAMREC data size is set to a larger value than supported.",
                ERR.NOIMAGE => "NOIMAGE: no stored image on bufrecord buffer.",
                ERR.INVALIDWAITHANDLE => "INVALIDWAITHANDLE: DCAMWAIT handle is invalid.",
                ERR.NEWRUNTIMEREQUIRED => "NEWRUNTIMEREQUIRED: DCAM Module Version is older than the version that the camera requests.",
                ERR.VERSIONMISMATCH => "VERSIONMISMATCH: parameter settings are different due to a driver/camera version mismatch.",
                ERR.RUNAS_FACTORYMODE => "RUNAS_FACTORYMODE: camera is running in factory mode.",
                ERR.IMAGE_UNKNOWNSIGNATURE => "IMAGE_UNKNOWNSIGNATURE: signature of image header is unknown or corrupted.",
                ERR.IMAGE_NEWRUNTIMEREQUIRED => "IMAGE_NEWRUNTIMEREQUIRED: version of image header is newer than version that used DCAM supports.",
                ERR.IMAGE_ERRORSTATUSEXIST => "IMAGE_ERRORSTATUSEXIST: image header signals error status.",
                ERR.IMAGE_HEADERCORRUPTED => "IMAGE_HEADERCORRUPTED: image header value is strange.",
                ERR.IMAGE_BROKENCONTENT => "IMAGE_BROKENCONTENT: image header value is corrupted.",
                ERR.UNKNOWNMSGID => "UNKNOWNMSGID: unknown message ID.",
                ERR.UNKNOWNSTRID => "UNKNOWNSTRID: unknown string ID.",
                ERR.UNKNOWNPARAMID => "UNKNOWNPARAMID: unknown parameter ID.",
                ERR.UNKNOWNBITSTYPE => "UNKNOWNBITSTYPE: unknown bitmap bit type.",
                ERR.UNKNOWNDATATYPE => "UNKNOWNDATATYPE: unknown frame data type.",
                ERR.NONE => "NONE: no error has been thrown.",
                ERR.INSTALLATIONINPROGRESS => "INSTALLATIONINPROGRESS: installation is in progress.",
                ERR.UNREACH => "UNREACH: internal error.",
                ERR.UNLOADED => "UNLOADED: something was called after the process had terminated.",
                ERR.THRUADAPTER => "THRUADAPTER.",
                ERR.NOCONNECTION => "NOCONNECTION: HDCAM lost connection to camera.",
                ERR.NOTIMPLEMENT => "NOTIMPLEMENT: not implemented yet.",
                ERR.APIINIT_INITOPTIONBYTES => "APIINIT_INITOPTIONBYTES: API_INIT has a invalid parameter : initoptionbytes.",
                ERR.APIINIT_INITOPTION => "APIINIT_INITOPTION: API_INIT has a invalid parameter : initoption.",
                ERR.INITOPTION_COLLISION_BASE => "INITOPTION_COLLISION_BASE.",
                ERR.INITOPTION_COLLISION_MAX => "INITOPTION_COLLISION_MAX.",
                ERR.SUCCESS => "SUCCESS.",
                _ => _value.ToString(),
            };
        }
    }
}
